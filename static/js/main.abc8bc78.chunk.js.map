{"version":3,"sources":["api/fetchData.ts","constants/constants.ts","components/commentsList/Comment.tsx","components/commentsList/CommentsList.tsx","components/user/User.tsx","components/postList/Post.tsx","components/postList/PostList.tsx","index.tsx","App.tsx"],"names":["getData","url","a","fetch","response","json","getPosts","getUsers","getComments","Comment","name","body","email","className","CommentList","comments","map","comment","key","id","User","user","city","address","Post","title","PostList","posts","post","ReactDOM","render","useState","setPosts","isLoading","setIsLoading","text","setText","loadPosts","postsFromApi","usersFromApi","commentsFromApi","find","userId","filter","postId","filteredMovies","toLowerCase","includes","length","type","placeholder","onChange","event","target","value","onClick","document","getElementById"],"mappings":"sPAMMA,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACSC,MAAM,GAAD,OCPN,yCDOM,OAAeF,IAD7B,cACRG,EADQ,yBAGPA,EAASC,QAHF,2CAAH,sDAMAC,EAAQ,uCAAG,sBAAAJ,EAAA,+EACfF,EAXK,UAUU,2CAAH,qDAIRO,EAAQ,uCAAG,sBAAAL,EAAA,+EACfF,EAdK,UAaU,2CAAH,qDAIRQ,EAAW,uCAAG,sBAAAN,EAAA,+EAClBF,EAjBQ,aAgBU,2CAAH,qDEZXS,G,MAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAf,OAChC,yBAAKC,UAAU,WACb,0CAGA,4BAAKH,GACL,2BACGC,GAEH,uBAAGE,UAAU,eACVD,MCXME,EAAyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpC,oCACGA,EAASC,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,eAASC,IAAKD,EAAQE,IAAQF,SCH9CG,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxBX,EAAyBW,EAAzBX,KAAME,EAAmBS,EAAnBT,MACNU,EADyBD,EAAZE,QACbD,KAER,OACE,yBAAKT,UAAU,QACb,0BAAMA,UAAU,cAAhB,sBACkBH,EADlB,YAC0BE,EAD1B,kBACyCU,MCFlCE,EAAkB,SAAC,GAAD,IAC7BC,EAD6B,EAC7BA,MACAd,EAF6B,EAE7BA,KACAU,EAH6B,EAG7BA,KACAN,EAJ6B,EAI7BA,SAJ6B,OAM7B,yBAAKF,UAAU,QACb,yBAAKA,UAAU,eACb,wCACA,4BAAKY,GACL,8CACA,2BAAId,GACJ,kBAAC,EAAD,CAAMU,KAAMA,KAEd,uBAAGR,UAAU,YAAb,aACA,kBAAC,EAAD,CAAaE,SAAUA,MCnBdW,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjC,oCACGA,EAAMX,KAAI,SAAAY,GAAI,OAAI,kBAAC,EAAD,eAAMV,IAAKU,EAAKT,IAAQS,SCJ/CC,IAASC,OACP,mBCDqB,WAAO,IAAD,EACDC,mBAAkB,IADjB,mBACpBJ,EADoB,KACbK,EADa,OAEOD,oBAAS,GAFhB,mBAEpBE,EAFoB,KAETC,EAFS,OAGHH,mBAAS,IAHN,mBAGpBI,EAHoB,KAGdC,EAHc,KAKrBC,EAAS,uCAAG,gCAAAnC,EAAA,6DAChBgC,GAAa,GADG,SAGW5B,IAHX,cAGVgC,EAHU,gBAIW/B,IAJX,cAIVgC,EAJU,gBAKc/B,IALd,OAKVgC,EALU,OAOhBR,EAASM,EAAatB,KAAI,SAAAY,GAAI,sBACzBA,EADyB,CAE5BP,KAAMkB,EAAaE,MAAK,SAAApB,GAAI,OAAIA,EAAKF,KAAOS,EAAKc,UACjD3B,SAAUyB,EAAgBG,QAAO,SAAA1B,GAAO,OAAIA,EAAQ2B,SAAWhB,EAAKT,YAGtEe,GAAa,GAbG,4CAAH,qDAoBTW,EAAiBlB,EAAMgB,QAAO,SAAAf,GAAI,OACtCA,EAAKH,MAAMqB,cAAcC,SAASZ,IAC/BP,EAAKjB,KAAKmC,cAAcC,SAASZ,MAGtC,OAAKR,EAAMqB,OAgCT,yBAAKnC,UAAU,WACb,2BACEoC,KAAK,OACLC,YAAY,+BACZC,SA7Ce,SAACC,GACpBhB,EAAQgB,EAAMC,OAAOC,UA8CnB,yBAAKzC,UAAU,iBACb,kBAAC,EAAD,CAAUc,MAAOkB,MArCnB,yBAAKhC,UAAU,WACZoB,EAEG,oCACE,4BACEgB,KAAK,SACLM,QAASlB,EACTxB,UAAU,gCAEToB,EAAY,aAAe,QAE9B,yBAAKpB,UAAU,YACb,yBAAKA,UAAU,oBAKnB,4BACEoC,KAAK,SACLM,QAASlB,EACTxB,UAAU,gCAEToB,EAAY,aAAe,WDrDxC,MACAuB,SAASC,eAAe,U","file":"static/js/main.abc8bc78.chunk.js","sourcesContent":["import { BASE_URL } from '../constants/constants';\n\nconst posts = 'posts';\nconst users = 'users';\nconst comments = 'comments';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  return response.json();\n};\n\nexport const getPosts = async () => {\n  return getData<Post[]>(posts);\n};\n\nexport const getUsers = async () => {\n  return getData<User[]>(users);\n};\n\nexport const getComments = async () => {\n  return getData<Comment[]>(comments);\n};\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n","import React, { FC } from 'react';\n\ninterface Props {\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport const Comment: FC<Props> = ({ name, body, email }) => (\n  <div className=\"comment\">\n    <span>\n      comment:\n    </span>\n    <h4>{name}</h4>\n    <p>\n      {body}\n    </p>\n    <p className=\"commentator\">\n      {email}\n    </p>\n  </div>\n);\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => (\n  <>\n    {comments.map(comment => <Comment key={comment.id} {...comment} />)}\n  </>\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { city } = address;\n\n  return (\n    <div className=\"user\">\n      <span className=\"user__span\">\n        {`Written by: ${name} ${email} from: ${city}`}\n      </span>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { CommentList } from '../commentsList/CommentsList';\nimport { User } from '../user/User';\n\ninterface Props {\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n}\n\nexport const Post: FC<Props> = ({\n  title,\n  body,\n  user,\n  comments,\n}) => (\n  <div className=\"post\">\n    <div className=\"description\">\n      <span>Title:</span>\n      <h3>{title}</h3>\n      <span>Description:</span>\n      <p>{body}</p>\n      <User user={user} />\n    </div>\n    <p className=\"comments\">Comments:</p>\n    <CommentList comments={comments} />\n  </div>\n);\n","import React, { FC } from 'react';\nimport { Post } from './Post';\n\ninterface Props {\n  posts: Posts[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => (\n  <>\n    {posts.map(post => <Post key={post.id} {...post} />)}\n  </>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { FC, useState } from 'react';\nimport { getPosts, getUsers, getComments } from './api/fetchData';\nimport './App.scss';\nimport { PostList } from './components/postList/PostList';\n\nexport const App: FC = () => {\n  const [posts, setPosts] = useState<Posts[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [text, setText] = useState('');\n\n  const loadPosts = async () => {\n    setIsLoading(true);\n\n    const postsFromApi = await getPosts();\n    const usersFromApi = await getUsers();\n    const commentsFromApi = await getComments();\n\n    setPosts(postsFromApi.map(post => ({\n      ...post,\n      user: usersFromApi.find(user => user.id === post.userId) as User,\n      comments: commentsFromApi.filter(comment => comment.postId === post.id),\n    })));\n\n    setIsLoading(false);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  };\n\n  const filteredMovies = posts.filter(post => (\n    post.title.toLowerCase().includes(text)\n    || post.body.toLowerCase().includes(text)\n  ));\n\n  if (!posts.length) {\n    return (\n      <div className=\"wrapper\">\n        {isLoading\n          ? (\n            <>\n              <button\n                type=\"button\"\n                onClick={loadPosts}\n                className=\"waves-effect waves-light btn\"\n              >\n                {isLoading ? 'Loading...' : 'Load'}\n              </button>\n              <div className=\"progress\">\n                <div className=\"indeterminate\" />\n              </div>\n            </>\n          )\n          : (\n            <button\n              type=\"button\"\n              onClick={loadPosts}\n              className=\"waves-effect waves-light btn\"\n            >\n              {isLoading ? 'Loading...' : 'Load'}\n            </button>\n          )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <input\n        type=\"text\"\n        placeholder=\"Find by Title or Description\"\n        onChange={handleChange}\n      />\n      <div className=\"wrapper--post\">\n        <PostList posts={filteredMovies} />\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}